import React from 'react'
import Moment from 'moment'
import Collapse from '@kunukn/react-collapse'

import { CommentNodeType } from 'requests/comments'
import Subcomments from 'components/comments/Subcomments'
import NewCommentForm from 'components/comments/NewCommentForm'

import { setCommentLikeHandler } from 'helpers/user-interactions'
import UserContext from 'helpers/UserContext'

interface CommentProps {
  commentNode: CommentNodeType
  isNewComment?: boolean
}
const Comment: React.FC<CommentProps> = ({ commentNode, isNewComment }) => {
  const {
    id,
    depth,
    myReaction,
    childCount,
    createdAt,
    by,
    content,
  } = commentNode

  const { currentUserInfo, modalOpen, setModalState } = React.useContext(
    UserContext
  )

  const [commentReaction, setCommentReaction] = React.useState(myReaction)
  const notLikedIcon = (
    <g id="UI-Icons" transform="translate(-451.000000, -666.000000)">
      <path
        d="M572,666 C638.826455,666 693,720.397403 693,787.5 C693,854.602597 638.826455,909 572,909 C505.173545,909 451,854.602597 451,787.5 C451,720.397403 505.173545,666 572,666 Z M572,677 C511.248678,677 462,726.472535 462,787.5 C462,848.527465 511.248678,898 572,898 C632.751322,898 682,848.527465 682,787.5 C682,726.472535 632.751322,677 572,677 Z M538.319849,774.133604 C540.408656,774.133604 542.111838,775.829821 542.111838,777.946053 L542.111838,839.187551 C542.111838,841.287629 540.424724,843 538.319849,843 L511.79199,843 C509.703182,843 508,841.303783 508,839.187551 L508,777.929899 C508.016068,775.829821 509.703182,774.133604 511.79199,774.133604 L538.319849,774.133604 Z M587.969203,710 C595.055082,710.129697 597.320635,716.72071 597.320635,716.72071 C597.320635,716.72071 603.378178,728.739616 597.722329,743.44016 C592.950206,755.862928 591.970074,756.864504 591.970074,756.864504 C591.970074,756.864504 590.427569,759.109971 595.312166,759.013045 C595.312166,759.013045 625.133914,758.883809 626.16225,758.883809 C628.363533,758.883809 635.38514,760.903115 634.983446,769.90114 C634.694227,776.556771 630.580882,778.883011 628.476007,779.64227 C628.202855,779.739197 628.058245,780.046131 628.17072,780.320757 C628.218923,780.433838 628.299262,780.530764 628.411736,780.595382 C630.564815,781.855429 634.967379,785.037854 634.870972,789.916496 C634.74243,795.829023 632.380471,798.009873 627.463738,799.366846 C627.190587,799.431464 627.013841,799.722244 627.09418,799.99687 C627.126316,800.14226 627.222722,800.255341 627.335196,800.319958 C629.199056,801.386152 632.396538,803.987017 632.203725,809.253366 C632.010912,814.616642 628.154652,816.506712 626.049776,817.152889 C625.776624,817.233662 625.615947,817.524442 625.696286,817.799067 C625.728421,817.912148 625.80876,818.025229 625.905166,818.089847 C627.23879,819.01065 629.215123,821.094574 629.118717,825.375501 C629.070514,827.637124 628.315329,829.284877 627.367332,830.464151 C625.873031,832.321912 623.527139,833.291179 621.149112,833.307333 L554.982108,833.436569 C554.96604,833.420415 551.382931,833.436569 551.382931,828.60639 L551.382931,784.73092 C551.398999,773.923597 554.403669,763.342436 560.075585,754.166711 C563.530152,748.609583 571.274809,739.708484 575.613102,735.104467 C576.577167,734.070583 580.079937,731.033547 580.079937,729.36964 C580.079937,727.237253 580.320953,723.796356 580.401292,717.383042 C580.449495,713.312122 583.743384,709.968152 587.792458,710 L587.969203,710 Z"
        id="like-empty"
      ></path>
    </g>
  )
  const likedIcon = (
    <g
      id="UI-Icons"
      transform="translate(-39.000000, -668.000000)"
      fill="#5E91FF"
      fill-rule="nonzero"
    >
      <path
        d="M160,668 C226.826455,668 281,722.397403 281,789.5 C281,856.602597 226.826455,911 160,911 C93.1735453,911 39,856.602597 39,789.5 C39,722.397403 93.1735453,668 160,668 Z M126.319849,776.133604 L99.7919895,776.133604 C97.7031817,776.133604 96.0160678,777.829821 96,779.929899 L96,779.929899 L96,841.187551 C96,843.303783 97.7031817,845 99.7919895,845 L99.7919895,845 L126.319849,845 C128.424724,845 130.111838,843.287629 130.111838,841.187551 L130.111838,841.187551 L130.111838,779.946053 C130.111838,777.829821 128.408656,776.133604 126.319849,776.133604 L126.319849,776.133604 Z M175.969203,712.000229 L175.792458,712.000229 C171.743384,711.968152 168.449495,715.312122 168.401292,719.383042 C168.320953,725.796356 168.079937,729.237253 168.079937,731.36964 C168.079937,733.033547 164.577167,736.070583 163.613102,737.104467 C159.274809,741.708484 151.530152,750.609583 148.075585,756.166711 C142.403669,765.342436 139.398999,775.923597 139.382931,786.73092 L139.382931,786.73092 L139.382931,830.60639 C139.382931,835.436569 142.96604,835.420415 142.982108,835.436569 L142.982108,835.436569 L209.149112,835.307333 C211.527139,835.291179 213.873031,834.321912 215.367332,832.464151 C216.315329,831.284877 217.070514,829.637124 217.118717,827.375501 C217.215123,823.094574 215.23879,821.01065 213.905166,820.089847 C213.80876,820.025229 213.728421,819.912148 213.696286,819.799067 C213.615947,819.524442 213.776624,819.233662 214.049776,819.152889 C216.154652,818.506712 220.010912,816.616642 220.203725,811.253366 C220.396538,805.987017 217.199056,803.386152 215.335196,802.319958 C215.222722,802.255341 215.126316,802.14226 215.09418,801.99687 C215.013841,801.722244 215.190587,801.431464 215.463738,801.366846 C220.380471,800.009873 222.74243,797.829023 222.870972,791.916496 C222.967379,787.037854 218.564815,783.855429 216.411736,782.595382 C216.299262,782.530764 216.218923,782.433838 216.17072,782.320757 C216.058245,782.046131 216.202855,781.739197 216.476007,781.64227 C218.580882,780.883011 222.694227,778.556771 222.983446,771.90114 C223.38514,762.903115 216.363533,760.883809 214.16225,760.883809 C213.133914,760.883809 183.312166,761.013045 183.312166,761.013045 C178.427569,761.109971 179.970074,758.864504 179.970074,758.864504 C179.970074,758.864504 180.950206,757.862928 185.722329,745.44016 C191.378178,730.739616 185.320635,718.72071 185.320635,718.72071 C185.320635,718.72071 183.055082,712.129697 175.969203,712.000229 L175.969203,712.000229 Z"
        id="like-full"
      ></path>
    </g>
  )

  const [commentIsOpen, setCommentIsOpen] = React.useState(true)
  const [newCommentFormIsOpen, setNewCommentFormIsOpen] = React.useState(false)

  // for visually reflecting newly added comments
  const [newComments, setNewComments] = React.useState<Array<CommentNodeType>>(
    []
  )
  const addNewComment = (newComment: CommentNodeType) => {
    setNewCommentFormIsOpen(false)
    setNewComments([newComment, ...newComments])
  }

  return (
    <li className={`w-full border-l ${depth == 0 ? 'pb-3 border-b' : ''}`}>
      <button
        className="p-1 pl-3 text-sm w-full h-full flex items-start"
        onClick={() => {
          setCommentIsOpen(!commentIsOpen)
        }}
      >
        <span className="font-bold text-left">{by.username}</span>
        <span className="text-gray-600"> â€¢ {Moment(createdAt).fromNow()}</span>
      </button>
      <Collapse
        isOpen={commentIsOpen}
        transition={`height 280ms cubic-bezier(.4, 0, .2, 1)`}
      >
        <p className="text-sm pl-3">{content}</p>
        <div className="text-xs p-1 ml-3 flex flex-row">
          <button
            className="flex flex-row mr-2"
            onClick={() =>
              setCommentLikeHandler(
                currentUserInfo,
                id,
                commentReaction,
                setCommentReaction
              )
            }
          >
            <svg
              className="h-5 w-5"
              viewBox="0 0 242 243"
              version="1.1"
              xmlns="http://www.w3.org/2000/svg"
            >
              {commentReaction === 1 ? likedIcon : notLikedIcon}
            </svg>
            <span className="ml-1">like</span>
          </button>
          <button
            className="flex flex-row ml-2"
            onClick={() => setNewCommentFormIsOpen(!newCommentFormIsOpen)}
          >
            <svg
              className="h-5 w-5"
              viewBox="0 0 242 243"
              version="1.1"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g id="UI-Icons" transform="translate(-772.000000, -698.000000)">
                <path
                  d="M848.396492,733.265828 L848.396035,698 L772,768.043518 L848.396035,838.087036 L848.396035,806.84117 C939.956836,806.842993 922.537226,862.973471 904.173285,898 C1043.58513,764.318282 928.213408,733.265828 848.396492,733.265828 Z"
                  id="reply"
                ></path>
              </g>
            </svg>
            <span className="ml-1">reply</span>
          </button>
        </div>
        <Collapse
          isOpen={newCommentFormIsOpen}
          transition={`height 280ms cubic-bezier(.4, 0, .2, 1)`}
        >
          <NewCommentForm
            commentableType="Comment"
            commentableId={id}
            addNewComment={addNewComment}
          />
        </Collapse>
        <div className="ml-1 pl-3">
          <ul className="bg-yellow-200">
            {newComments.map((comment) => {
              return <Comment key={comment.id} commentNode={comment} />
            })}
          </ul>
          {!isNewComment && id !== '' ? <Subcomments parentId={id} /> : null}
        </div>
      </Collapse>
    </li>
  )
}

export default Comment
